{"version":3,"sources":["data.js","context/context.js","components/QuizSetupForm.js","components/Timer.js","components/DisplayQuestion.js","components/Modal.js","components/App.js","index.js"],"names":["difficultyType","level","category","type","questions","question","answers","correctAnswer","AppContext","React","createContext","useGlobalContext","useContext","Provider","children","useState","index","setIndex","setQuestions","isStarted","setIsStarted","counter","setCounter","isModalOpen","setIsModalOpen","questionAmount","difficulty","quizDetail","setQuizDetail","nextQuestion","oldIndex","console","log","length","value","handleChange","e","name","target","handleSubmit","preventDefault","categoryQuestions","find","item","slice","fetchQuestions","checkAnswer","answer","oldCounter","closeModal","QuizSetupForm","className","htmlFor","max","onChange","onClick","Timer","timer","COUNTDOWNTIME","timerTime","setTimerTime","useEffect","setInterval","newTime","clearInterval","milliseconds","hours","Math","floor","minutes","seconds","DisplayQuestion","String","map","Modal","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10b2667f.chunk.js","sourcesContent":["export const difficultyType = [\n  {\n    level: 'easy',\n    category: [\n      {\n        type: 'history',\n        questions: [\n          {\n            question: 'Afghanistan in which year got its independance from history 1',\n            answers: [1929, 1919, 1928, 1993],\n            correctAnswer: 1919,\n          },\n\n          {\n            question: 'How much does Afghanistan has provinces from history 2',\n            answers: [34, 33, 32, 35],\n            correctAnswer: 34,\n          },\n          {\n            question: 'What is the Capital of Afghanistan from history 3',\n            answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n            correctAnswer: 'Kabul',\n          },\n          {\n            question: 'What is the Capital of Afghanistan from history 4',\n            answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n            correctAnswer: 'Kabul',\n          },\n          {\n            question: 'What is the Capital of Afghanistan from history 5',\n            answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n            correctAnswer: 'Kabul',\n          },\n        ],\n      },\n      // 0.history.q1.question\n\n      {\n        type: 'sports',\n        questions: [\n          {\n            question: 'Afghanistan in which year got its independance from sports',\n            answers: [1929, 1919, 1928, 1993],\n            correctAnswer: 1919,\n          },\n          {\n            question: 'How much does Afghanistan has provinces from sports',\n            answers: [34, 33, 32, 35],\n            correctAnswer: 34,\n          },\n          {\n            question: 'What is the Capital of Afghanistan from sports',\n            answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n            correctAnswer: 'Kabul',\n          },\n        ],\n      },\n    ],\n  },\n]\n\n// export const medium = [\n//   {\n//     history: {\n//       q1: {\n//         question: 'Afghanistan in which year got its independance in medium from history',\n//         answers: [1929, 1919, 1928, 1993],\n//         correctAnswer: 1,\n//       },\n//       q2: {\n//         question: 'How much does Afghanistan has provinces in medium from history',\n//         answers: [34, 33, 32, 35],\n//         correctAnswer: 0,\n//       },\n//       q3: {\n//         question: 'What is the Capital of Afghanistan in medium from history',\n//         answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n//         correctAnswer: 3,\n//       },\n//     },\n//     sports: {\n//       q1: {\n//         question: 'Afghanistan in which year got its independance in medium from sports',\n//         answers: [1929, 1919, 1928, 1993],\n//         correctAnswer: 1,\n//       },\n//       q2: {\n//         question: 'How much does Afghanistan has provinces in medium from sports',\n//         answers: [34, 33, 32, 35],\n//         correctAnswer: 0,\n//       },\n//       q3: {\n//         question: 'What is the Capital of Afghanistan in medium from sports',\n//         answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n//         correctAnswer: 3,\n//       },\n//     },\n//   },\n// ]\n\n// export const hard = [\n//   {\n//     history: {\n//       q1: {\n//         question: 'Afghanistan in which year got its independance in hard from history',\n//         answers: [1929, 1919, 1928, 1993],\n//         correctAnswer: 1,\n//       },\n//       q2: {\n//         question: 'How much does Afghanistan has provinces in hard from history',\n//         answers: [34, 33, 32, 35],\n//         correctAnswer: 0,\n//       },\n//       q3: {\n//         question: 'What is the Capital of Afghanistan in hard from history',\n//         answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n//         correctAnswer: 3,\n//       },\n//     },\n\n//     sports: {\n//       q1: {\n//         question: 'Afghanistan in which year got its independance in hard from sports',\n//         answers: [1929, 1919, 1928, 1993],\n//         correctAnswer: 1,\n//       },\n//       q2: {\n//         question: 'How much does Afghanistan has provinces in hard from sports',\n//         answers: [34, 33, 32, 35],\n//         correctAnswer: 0,\n//       },\n//       q3: {\n//         question: 'What is the Capital of Afghanistan in hard from sports',\n//         answers: ['Herat', 'Mazar', 'logar', 'Kabul'],\n//         correctAnswer: 3,\n//       },\n//     },\n//   },\n// ]\n","import React, { useContext, useState, useEffect } from 'react'\nimport { difficultyType } from '../data'\n\nconst AppContext = React.createContext()\n\nconst Provider = ({ children }) => {\n  const [index, setIndex] = useState(0)\n  const [questions, setQuestions] = useState([])\n  const [isStarted, setIsStarted] = useState(false)\n  const [counter, setCounter] = useState(0)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [quizDetail, setQuizDetail] = useState({\n    questionAmount: 2,\n    category: 'history',\n    difficulty: 'easy',\n  })\n\n  const fetchQuestions = ({ questionAmount, category, difficulty }) => {\n    const difficultyLevel = difficultyType.find((item) => item.level === difficulty)\n    const categoryType = difficultyLevel.category.find((item) => item.type === category)\n    const categoryQuestions = categoryType.questions.slice(0, questionAmount)\n\n    setQuestions(categoryQuestions)\n  }\n\n  const nextQuestion = () => {\n    setIndex((oldIndex) => {\n      console.log(oldIndex)\n      const index = oldIndex + 1\n      if (index > questions.length - 1) {\n        console.log('questions finished')\n        // Open Modal\n        setIsModalOpen(true)\n        return 0\n      } else {\n        return index\n      }\n    })\n  }\n  const checkAnswer = (answer) => {\n    if (answer && isStarted) {\n      setCounter((oldCounter) => {\n        const counter = oldCounter + 1\n        return counter\n      })\n    } else {\n      setCounter(counter)\n    }\n    nextQuestion()\n  }\n\n  const closeModal = () => {\n    setIsModalOpen(false)\n    setIsStarted(false)\n    setCounter(0)\n  }\n  const handleChange = (e) => {\n    const name = e.target.name\n    const value = e.target.value\n    setQuizDetail({ ...quizDetail, [name]: value })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setIsStarted(true)\n\n    //const { questionAmount, category, difficulty } = quizDetail\n    fetchQuestions({ ...quizDetail })\n  }\n  return (\n    <AppContext.Provider\n      value={{\n        quizDetail,\n        handleChange,\n        handleSubmit,\n        isStarted,\n        questions,\n        index,\n        nextQuestion,\n        checkAnswer,\n        counter,\n        isModalOpen,\n        closeModal,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\nexport default Provider\n","import React from 'react'\nimport { useGlobalContext } from '../context/context'\nconst QuizSetupForm = () => {\n  const { quizDetail, handleChange, handleSubmit } = useGlobalContext()\n  return (\n    <main>\n      <div className='quiz quiz-small'>\n        <form className='setup-form'>\n          <h2>Select Your Options</h2>\n          <div className='form-control'>\n            <label htmlFor='amount'>Number of Questions</label>\n            <input\n              name='questionAmount'\n              type='number'\n              max='5'\n              className='form-input'\n              value={quizDetail.questionAmount}\n              onChange={handleChange}\n            />\n          </div>\n          <div className='form-control'>\n            <label htmlFor='category'>Select Category</label>\n            <select\n              name='category'\n              className='form-input'\n              value={quizDetail.category}\n              onChange={handleChange}\n            >\n              <option value='sports'>sports</option>\n              <option value='history'>history</option>\n            </select>\n          </div>\n\n          <div className='form-control'>\n            <label htmlFor='difficulty'>Select Difficulty</label>\n            <select\n              name='difficulty'\n              className='form-input'\n              value={quizDetail.difficulty}\n              onChange={handleChange}\n            >\n              <option value='easy'>easy</option>\n              <option value='medium'>medium</option>\n              <option value='hard'>hard</option>\n            </select>\n            <button type='submit' className='submit-btn' onClick={handleSubmit}>\n              Start\n            </button>\n          </div>\n        </form>\n      </div>\n    </main>\n  )\n}\nexport default QuizSetupForm\n","import React, { useEffect, useState } from 'react'\nimport { useGlobalContext } from '../context/context'\n\nconst Timer = () => {\n  const COUNTDOWNTIME = 10000\n  let timer\n  //const [timerstart, setTimerStart] = useState(0)\n  const [timerTime, setTimerTime] = useState(COUNTDOWNTIME)\n  const { index, questions, nextQuestion } = useGlobalContext()\n  //const [totalTime, setTotalTime] = useState(COUNTDOWNTIME)\n\n  const timeConverter = (milliseconds) => {\n    const hours = ('0' + Math.floor((milliseconds / 3600000) % 60)).slice(-2)\n    const minutes = ('0' + Math.floor((milliseconds / 60000) % 60)).slice(-2)\n    let seconds\n    if (milliseconds === COUNTDOWNTIME) {\n      seconds = ('0' + Math.floor(milliseconds / 1000)).slice(-2)\n    } else {\n      seconds = ('0' + (Math.floor((milliseconds / 1000) % 60) % 60)).slice(-2)\n    }\n    return {\n      hours,\n      minutes,\n      seconds,\n    }\n  }\n\n  const startTimer = () => {\n    timer = setInterval(() => {\n      const newTime = timerTime - 1000\n      console.log(timerTime)\n      console.log(newTime)\n      if (newTime >= 0) {\n        setTimerTime(newTime)\n      } else {\n        console.log('next question is going to be called')\n        console.log(index)\n        if (index < questions.length) {\n          setTimerTime(COUNTDOWNTIME)\n          console.log('run for how often')\n        }\n        nextQuestion()\n      }\n    }, 700)\n  }\n\n  useEffect(() => {\n    startTimer()\n    return () => clearInterval(timer)\n  })\n  const { hours, minutes, seconds } = timeConverter(timerTime)\n\n  return <div className='timer'>{seconds}</div>\n}\nexport default Timer\n","import React, { useEffect, useState } from 'react'\nimport { useGlobalContext } from '../context/context'\nimport Timer from './Timer'\n\nconst DisplayQuestion = () => {\n  const { questions, index, nextQuestion, checkAnswer, counter } = useGlobalContext()\n  const { question, answers, correctAnswer } = questions[index]\n\n  return (\n    <section className='quiz'>\n      <Timer />\n      <p className='correct-answers'>{`Correct Answer:${index}/${counter}`}</p>\n      <div className='container'>\n        <h2>{String(question)}</h2>\n\n        <div className='btn-container'>\n          {answers.map((answer, index) => {\n            return (\n              <button\n                key={index}\n                className='answer-btn'\n                onClick={() => checkAnswer(answer === correctAnswer)}\n              >\n                {answer}\n              </button>\n            )\n          })}\n        </div>\n      </div>\n      <button className='next-question' onClick={nextQuestion}>\n        Next Question\n      </button>\n    </section>\n  )\n}\nexport default DisplayQuestion\n","import React from 'react'\nimport { useGlobalContext } from '../context/context'\n\nconst Modal = () => {\n  const { isModalOpen, closeModal, counter } = useGlobalContext()\n  return (\n    <div className={`${isModalOpen ? 'modal-container isOpen' : 'modal-container'}`}>\n      <div className='modal-content'>\n        <h2>congrats!</h2>\n        <p>You answer {counter} questions correctly</p>\n        <button className='close-btn' onClick={closeModal}>\n          play again\n        </button>\n      </div>\n    </div>\n  )\n}\nexport default Modal\n","import React from 'react'\nimport { useGlobalContext } from '../context/context'\nimport QuizSetupForm from './QuizSetupForm'\nimport DisplayQuestions from './DisplayQuestion'\nimport Modal from './Modal'\nconst App = () => {\n  const { isStarted } = useGlobalContext()\n  return (\n    <div>\n      <Modal />\n      {!isStarted ? <QuizSetupForm /> : null}\n      {isStarted ? <DisplayQuestions /> : null}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport Provider from './context/context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}